# Strings (#9)

## 도입부

> 엘릭서에서 문자열에 대해 알아보고, 문자열이 어떻게 바이너리로 변하는지 알아보겠습니다.

데이터 타입에 대한 게시물에서 설명했듯이 엘릭서의 문자열은 실제로 UTF-8로 인코딩된 문자열의 바이트를 포함하는 바이너리입니다.

<!-- livebook:{"force_markdown":true} -->

```elixir
iex> is_binary("Speedy Taco")
true
```

그러나 여전히 문자열 타입으로 생각할 수 있습니다. 정말 자세히 살펴보지 않는 이상 다른 점을 알 수 없습니다. 문자열로 할 수 있는 모든 작업은 문자열이 바이너리라는 사실조차 모른 채 수행할 수 있습니다. 데이터 타입에 대한 이러한 사고방식은 엘릭서에서 흔히 볼 수 있습니다.

## 여담 시간 - 유니코드 및 인코딩

유니코드와 UTF 인코딩에 대해 자세히 설명하지는 않겠지만, 관심이 있는 분들을 위해 간략하게 설명하겠습니다. [유니코드](https://en.wikipedia.org/wiki/Unicode)는 라틴 문자부터 키릴문자, 한자, 좀 더 모호한 문자, 심지어 [이모지](https://unicode.org/emoji/charts/full-emoji-list.html)와 같은 그래픽 문자에 이르기까지 수많은 문자로 구성되어 있습니다.

각 유니코드 문자는 코드 포인트라고 하는 숫자와 관련이 있습니다. 가능한 코드 포인트의 범위는 0에서 0x10FFFF까지 이지만, 현재 0x2ffff 이상의 모든 코드 포인트는 대부분 할당되지 않았습니다. 처음 128개의 코드 포인트는 유니코드 이전의 아스키 텍스트와 호환되도록 기본 아스키와 1 대 1로 대응됩니다.
