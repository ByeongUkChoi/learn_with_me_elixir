# Getting to Know Elixir (#2)

## 도입부

엘릭서로 뛰어들기 전에, 좀 더 자세히 알아봅시다. 언어에 대해 아는 것은 그것이 어디에서 왔고 무엇을 할 수 있는지에 대하여 더 나은 생각을 갖게 주도록 하여 좋습니다.

저는 언어를 배우기 전에, 장단점을 배우는 것 뿐만 아니라 그것으로 무엇을 할 수 있는지 읽는 것을 좋아합니다. 그것은 저에게 그 언어가 어디에 그리고 언제 써야 하는지 도와줍니다.

## 엘릭서의 특성

엘릭서는 파이썬과 자바스크립트같이 동적 타이핑 언어입니다. 이것은 데이터 타입이 컴파일 타임이 아니라 런타임에 결정된다는 것을 뜻합니다. 한 변수는 어떤 지점에서는 문자열을 참조할 수 있고, 그 후에는 정수를 참조할 수 있습니다. 이것은 컴파일 타임에 엄격하게 알아야하 는 정적 타입 언어인 자바와 C#같은 언어와는 대조적입니다. 정적 타입 언어에서 변수는 항상 같은 타입이어야만 하고 다른 타입을 가질 수 없습니다.

이런 트레이드오프는 유연성과 이른 에러 감지의 사이에 있습니다. 정적 타입 언어는 컴파일 타임에 타입 관련된 에러를 잡을 수 있고 해당 타입 정보로 효율적인 코드 컴파일을 할 수 있지만, 코드의 유연성은 더 떨어집니다.

엘릭서는 함수형입니다. 함수형 언어는 일급 시민 함수로 되어있고 선언형 프로그래밍인 경향이 있는데, 어떻게 할 것인지 보다 무엇을 할 것인지에 초점을 맞춰야 하는 경향이 있다. 함수는 작고 단순한 경향이 있으며, 작은 함수들을 조립해서 더 큰 함수를 만듭니다. 또한 함수형 언어는 불변형 데이터를 사용하는 경향이 있습니다. 이 시점에서 저는 함수형 언어의 전문가는 아니지만, 향후 글에서 함수형 프로그래밍의 이해한 내용을 계속해서 살펴보겠습니다. 이것은 명령형 프로그래밍과는 다른 사고방식을 가져야 하고, 제가 아직 완전히 익히지 못한 부분입니다. 연습하고 함수형 예제 코드를 찾는 것은 아마 더 잘하기 위한 열쇠일 것입니다.

엘릭서 언어는 확장과 유지 보수가 가능한 애플리케이션을 만드는 것을 지향합니다. 엘릭서는 매우 이 원칙들을 강조합니다. 그리고 저는 언어를 배우면서 이러한 언어의 측면을 더 잘 이해하기를 바랍니다.

## 엘릭서 플랫폼

엘릭서에게는 언어 그 이상의 훨씬 더 많은 것이 있기 때문에 제가 "엘릭서 언어"라는 용어를 사용했습니다. 그것에는 실행되는 플랫폼과 주변 생태계가 있습니다. 자바, 스칼라, 클로저가 JVM 바이트 코드로 컴파일하여 자바 가상 머신(VM)에서 실행되고, C#, VB.NET, F#이 IL(중간 어셈블리) 바이트 코드로 컴파일되고 .NET언어를 위한 VM인 공용 언어 런타임에서 실행되는 것처럼, 엘릭서도 또한 바이트 코드로 컴파일되며 가상 머신에서 실행됩니다.
