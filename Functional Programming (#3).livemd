# Functional Programming (#3)

## 도입부

엘릭서가 함수형 언어이기 때문에, 함수형 프로그래밍의 동작에 대해 익숙해지는 것이 좋습니다. 이전에 자바스크립트와 C#의 기능을 함수형으로 사용한 적은 있지만, 함수형 언어는 이번이 처음입니다. 그래서 저는 여기에 제가 아는 것들을 쓰겠지만 함수형 프로그래밍에는 그보다 훨씬 많은 것이 있을 것입니다.

저는 여러분이 엘릭서를 더 잘 이해하도록 제 관점에서 함수형 프로그래밍의 본질에 대한 최소한의 이해를 시켜드리고 싶습니다. 저는 우리가 진행하면서 함수형 프로그래밍의 본질에 대해 더 많이 배울 것이라고 확신합니다.

## 데이터 vs 함수

객체 지향 언어에서 데이터는 일반적으로 그것을 작동하는 함수와 결합되어 있습니다. 함수형 언어에서는 데이터와 함수는 엄격하게 분리되어 있습니다. 함수는 자체적으로 동작하지만, 관련된 함수들은 종종 모듈로 그룹화됩니다. 그리고 함수는 파라미터로 데이터를 받고 호출자에게 데이터를 반환합니다. 함수는 데이터를 변환하는 것으로 볼 수 있습니다.

## 복잡한 사이드 이펙트

사이드 이펙트란 어떤 함수가 그 함수 밖의 다른 부분에 영향을 미치는 것을 말합니다. 사이드 이펙트가 있는 함수는 전달된 것이 아닌 공유 데이터를 변경하는 것이며, 객체 지향 코드에서는 이것이 일반적입니다. 또한 사이드 이펙트가 있는 함수는 입력 데이터 가져오기, 출력 데이터 내보내기, 네트워크로 데이터 전송하기, 화면에 그리기 등의 환경에 영향을 끼칠 수 있습니다. 이것들은 모두 함수의 경계를 넘어선 효과들입니다.

사이드 이펙트가 없는 함수는 매개 변수를 가지고 그 데이터를 기반으로 연산을 수행하여 값을 반환합니다. 이러한 함수를 순수 함수라고 하며 완전히 독립적으로 존재할 수 있습니다. 순수 함수는 함수형 프로그래밍에서 이상적입니다. 여러분의 코드를 훨씬 더 이해하기 쉽게 만들고 특정 유형의 버그(이 데이터가 어떻게 그리고 어디서 수정되었는지)를 피할 뿐만 아니라, 함수를 테스트하기 쉽게 만들어 줍니다. 함수에서 오직 입력 파라미터에 기반하여 값이 반환되는 경우가 환경이 어떤 양항을 미치는지 알아내야 하는 경우보다 테스트가 훨씬 간단해질 것입니다.

현재 명백하게 사이드 이펙트가 없는 프로그램은 쓸모가 없을 것입니다. 프로그램은 다른 곳에서 온 입력을 읽고, 화면에 그리고, 다른 프로그램과 통신하고, 일반적으론 그들의 환경과 상호작용하는 것이 필요합니다. 그래서 여러분은 적어도 *약간의* 사이드 이펙트가 있는 함수를 가지고 있어야 합니다. 함수형 프로그래밍의 관례는 이를 인식하고 있으며, 사이드 이펙트에만 전념하는 특별한 함수로 두어 격리하는 것이 최선입니다.

값을 연산하고 화면에 써야 하나요? 가능합니다. 그러나 그것을 같은 함수 안에서 하지는 마십시오. 순수 함수는 입력값을 받아서 계산하고 결과를 출력합니다. 그리고 다른 함수는 데이터 일부를 가져와서 화면에 표시하는 것만 합니다. 이러한 사이드 이펙트를 격리하는 것은 함수형 코드를 테스트하기 쉽고 쉽게 읽고 유지보수 할 수 있도록 도와줍니다. 화면에 기록된 함숫값을 추측할 수 없습니다. 그것은 모두 그것을 담당하는 함수에서 이뤄집니다.
