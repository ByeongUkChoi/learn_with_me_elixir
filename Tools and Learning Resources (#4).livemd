# Tools and Learning Resources (#4)

## 도입부

이제 엘릭서에 깊게 배워보는 시간이 되었습니다. 그러나 그 전에 제가 사용 중인 학습 자료와 도구에 대해 다뤄보겠습니다. 여기에는 여러분이 따라야 할 것들도 포함됩니다.

## 학습 자료

저는 엘릭서를 독학하기 위해 다음 자료들을 보고 있습니다. 엘릭서에 대해 알기 위해서 다른 웹사이트와 기사들도 읽었지만, 아래는 정기적으로 읽을 자료들입니다. 다른 것들보다 저에게 더 유용할 수 있을 것입니다.

## 기초 정보

이것들은 제가 엘릭서의 기초를 독학하면서 사용한 자료들입니다.

* 엘릭서 문서 (단순히 읽기 좋음). 언어의 기능들은 [시작 가이드](https://elixir-lang.org/getting-started/introduction.html)에 기술되어있고 표준 라이브러리와 엘릭서 API는 [공식 문서](https://hexdocs.pm/elixir/Kernel.html)에 기술되어있습니다.
* Ben Marx, Bruce Tate 그리고 Jose valim의 책 [Adopting Elixir](https://www.amazon.com/Adopting-Elixir-Production-Ben-Marx/dp/1680502522/ref=sr_1_1?ie=UTF8&qid=1537478382&sr=8-1&keywords=Adopting+Elixir)
* Painlessly Functional and Concurrent: Marc Sugiyama의 엘릭서 소개. 이 영상은 2016년 OSCon에서 진행된 영상으로 [Safari Books Online](https://www.safaribooksonline.com/)에서 확인 할 수 있습니다.
* [culttt.com](https://www.culttt.com/)의 많은 유용한 블로그 게시물
* Ulisses Almeida의 책 [Learn Functional Programming with Elixir](https://www.amazon.com/Learn-Functional-Programming-Elixir-Foundations/dp/168050245X/ref=sr_1_2?ie=UTF8&qid=1537479803&sr=8-2&keywords=Learn+Functional+Programming+with+Elixir)
* 데이브 토마스의 책 [Programming Elixir 1.6](https://www.amazon.com/Programming-Elixir-1-6-Functional-Concurrent/dp/1680502999/ref=sr_1_1?ie=UTF8&qid=1537479856&sr=8-1&keywords=Programming+Elixir+1.6)

## 심화 정보

최종적으로 엘릭서의 심화 기능과 피닉스 프레임워크에 대해 배울 수 있는 몇가지 자료들입니다.

* Andre Albuquerque와 Daniel Caixinha의 책 [Mastering Elixir](https://www.amazon.com/Mastering-Elixir-distributed-fault-tolerant-applications/dp/1788472675/ref=sr_1_1_sspa?ie=UTF8&qid=1537478604&sr=8-1-spons&keywords=Mastering+Elixir&psc=1)
* João Gonçalves의 영상 Advanced Elixir and OTP은 Packt Press에서 출판하였고 [Safari Books Online](https://www.safaribooksonline.com/)에서 확인 할 수 있습니다.
* Marc Sugiyama의 토크 컨퍼런스 영상 Rapid, scalable websites with Elixir and Phoenix. 2017년에 OSCon에서 진행되었으며, [Safari Books Online](https://www.safaribooksonline.com/)에서 확인 할 수 있습니다.
* Saša Jurić의 책 Elixir in Action
* Lance Halvorsen의 책 [Functional Web Development with Elixir, OTP, and Phoenix](https://www.amazon.com/Functional-Web-Development-Elixir-Phoenix/dp/1680502433/ref=sr_1_1?ie=UTF8&qid=1537479561&sr=8-1&keywords=Functional+Web+Development+with+Elixir%2C+OTP%2C+and+Phoenix)
* Chris McCord, Bruce Tate 그리고 Jose Valim의 책 [Programming Phoenix 1.4](https://www.amazon.com/Programming-Phoenix-1-4-Productive-Reliable/dp/1680502263/ref=sr_1_1?ie=UTF8&qid=1537479904&sr=8-1&keywords=Programming+phoenix)

## 배우고 쓰는 과정

제가 엘릭서를 배우는 과정을 작성하고 설명하려고 합니다. 아무래도 저의 이후 게시글들은 이전보다 더 나은 정보를 전달할 것입니다.

저의 학습 방법은 여러 (종종 흥미로운 정보가 포함되어있는 것도 있습니다)로부터 주제를 읽고, 가능한 주제의 개요를 만들고 그다음 쓸 주제를 선택하는 것입니다. 각 주제에 대해 작성하면서 저는 그것들을 깊게 파고들고, 제가 가진 질문에 답을 찾기 위해 연구하고, 언어가 어떻게 돌아가는지 살펴보는 경향이 있습니다.

지금까지 찾아보면서 아직 조사하지 않은 주제와 흥미로운 기능을 자주 볼 수 있었습니다. 그래서 아직 다루지 않은 엘릭서의 특징들을 알고 있습니다. 그것들은 저의 개요에 더해지며 제가 더 배울수록 개요는 확장됩니다. 저는 그것을 작성할 때까지는 보통 표면적인 정보만 가지고 있고 그때부터 연구하고 상세히 찾아봅니다.

그래서 제가 이제까지 쓴 글보다 더 많이 알고 있을 수 있습니다. 그러나 그 시점에는 그 주제에 대해 아마 잘 모르고 있었을 것입니다. 또한 글쓰기는 선형적으로 하는 경향이 있지만(제임스 조이스가 아니라면), 다양한 출처로부터의 학습은 그렇게 많이는 못 할 것입니다. 가능한 한 비슷하게 하려고 하겠지만 특정 지점에서는 제가 작성한 내용이 이제까지 배운 것을 항상 다루지는 않을 것입니다.

## 도구

여러분이 계속하고 싶다면, 제가 사용하는 도구를 익히는 것에 관심이 있을지도 모릅니다. 나중에는 다른 도구를 사용할 수도 있지만, 이것은 가까운 미래에 사용할 도구입니다.

제가 사용할 도구는 다음과 같습니다.

* 엘릭서 플랫폼과 관련된 툴: 하나의 간편한 패키지에 포함되어있으며 그것 없이는 엘릭서를 실행할 수 없습니다.
* 비쥬얼 스튜디오 코드: 엘릭서 개발을 위해 꼭 이 텍스트 에디터가 필요한 것은 아닙니다. 크로스 플랫폼을 지원하고, 자동 완성 및 구문 강조를 위한 유용한 엘릭서 플러그인이 있으며 앞으로 유용할 플러그인이 될 좋은 에코시스템을 가지고 있으므로 사용하고 있습니다.
* 커맨드 라인: 어떤 커맨드 라인 환경이든지 가능합니다. 윈도우에서는 기본 커맨드 라인 콘솔보다 훨씬 좋은 Cmder를 추천합니다. 맥에서는 저는 표준 터미널 앱을 사용합니다. 리눅스에서는 어떤 배시 쉘에서든지 적합할 것입니다.

이 시점에서 필요한 모든 것들은 여기까지입니다.

엘릭서 플랫폼 및 관련 툴을 제외하고 대부분은 실제로 꼭 필요하진 않습니다. 여러분이 선호하는 텍스트 에디터로도 충분하지만, 자동완성과 구문 강조를 위해 플러그인 설치를 추천합니다.

## 엘릭서 설치

[엘릭서 웹사이트](https://elixir-lang.org/)로 가서 설치 링크를 클릭하십시오. 지침에 따라 여러분의 플랫폼에 설치하십시오. 심지어 실행할 수 있는 라즈베리파이 패키지와 도커 컨테이너도 있습니다.
